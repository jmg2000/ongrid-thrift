// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "ongrid2"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  DataRowSet executeSelectQuery(string authToken, Query query)")
  fmt.Fprintln(os.Stderr, "  void executeNonSelectQuery(string authToken, Query query)")
  fmt.Fprintln(os.Stderr, "  string startBatchExecution(string authToken)")
  fmt.Fprintln(os.Stderr, "  void addQuery(string authToken, string batchID, Query query)")
  fmt.Fprintln(os.Stderr, "  string finishBatchExecution(string authToken, string batchID, Query condition, Query onSuccess)")
  fmt.Fprintln(os.Stderr, "  string batchExecute(string authToken,  queries, Query condition, Query onSuccess)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := ongrid2.NewDBClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "executeSelectQuery":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteSelectQuery requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg24 := flag.Arg(2)
    mbTrans25 := thrift.NewTMemoryBufferLen(len(arg24))
    defer mbTrans25.Close()
    _, err26 := mbTrans25.WriteString(arg24)
    if err26 != nil {
      Usage()
      return
    }
    factory27 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt28 := factory27.GetProtocol(mbTrans25)
    argvalue1 := ongrid2.NewQuery()
    err29 := argvalue1.Read(jsProt28)
    if err29 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteSelectQuery(value0, value1))
    fmt.Print("\n")
    break
  case "executeNonSelectQuery":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteNonSelectQuery requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg31 := flag.Arg(2)
    mbTrans32 := thrift.NewTMemoryBufferLen(len(arg31))
    defer mbTrans32.Close()
    _, err33 := mbTrans32.WriteString(arg31)
    if err33 != nil {
      Usage()
      return
    }
    factory34 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt35 := factory34.GetProtocol(mbTrans32)
    argvalue1 := ongrid2.NewQuery()
    err36 := argvalue1.Read(jsProt35)
    if err36 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteNonSelectQuery(value0, value1))
    fmt.Print("\n")
    break
  case "startBatchExecution":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartBatchExecution requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.StartBatchExecution(value0))
    fmt.Print("\n")
    break
  case "addQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AddQuery requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg40 := flag.Arg(3)
    mbTrans41 := thrift.NewTMemoryBufferLen(len(arg40))
    defer mbTrans41.Close()
    _, err42 := mbTrans41.WriteString(arg40)
    if err42 != nil {
      Usage()
      return
    }
    factory43 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt44 := factory43.GetProtocol(mbTrans41)
    argvalue2 := ongrid2.NewQuery()
    err45 := argvalue2.Read(jsProt44)
    if err45 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddQuery(value0, value1, value2))
    fmt.Print("\n")
    break
  case "finishBatchExecution":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FinishBatchExecution requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg48 := flag.Arg(3)
    mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
    defer mbTrans49.Close()
    _, err50 := mbTrans49.WriteString(arg48)
    if err50 != nil {
      Usage()
      return
    }
    factory51 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt52 := factory51.GetProtocol(mbTrans49)
    argvalue2 := ongrid2.NewQuery()
    err53 := argvalue2.Read(jsProt52)
    if err53 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg54 := flag.Arg(4)
    mbTrans55 := thrift.NewTMemoryBufferLen(len(arg54))
    defer mbTrans55.Close()
    _, err56 := mbTrans55.WriteString(arg54)
    if err56 != nil {
      Usage()
      return
    }
    factory57 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt58 := factory57.GetProtocol(mbTrans55)
    argvalue3 := ongrid2.NewQuery()
    err59 := argvalue3.Read(jsProt58)
    if err59 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FinishBatchExecution(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "batchExecute":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "BatchExecute requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg61 := flag.Arg(2)
    mbTrans62 := thrift.NewTMemoryBufferLen(len(arg61))
    defer mbTrans62.Close()
    _, err63 := mbTrans62.WriteString(arg61)
    if err63 != nil { 
      Usage()
      return
    }
    factory64 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt65 := factory64.GetProtocol(mbTrans62)
    containerStruct1 := ongrid2.NewDBBatchExecuteArgs()
    err66 := containerStruct1.ReadField2(jsProt65)
    if err66 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Queries
    value1 := argvalue1
    arg67 := flag.Arg(3)
    mbTrans68 := thrift.NewTMemoryBufferLen(len(arg67))
    defer mbTrans68.Close()
    _, err69 := mbTrans68.WriteString(arg67)
    if err69 != nil {
      Usage()
      return
    }
    factory70 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt71 := factory70.GetProtocol(mbTrans68)
    argvalue2 := ongrid2.NewQuery()
    err72 := argvalue2.Read(jsProt71)
    if err72 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg73 := flag.Arg(4)
    mbTrans74 := thrift.NewTMemoryBufferLen(len(arg73))
    defer mbTrans74.Close()
    _, err75 := mbTrans74.WriteString(arg73)
    if err75 != nil {
      Usage()
      return
    }
    factory76 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt77 := factory76.GetProtocol(mbTrans74)
    argvalue3 := ongrid2.NewQuery()
    err78 := argvalue3.Read(jsProt77)
    if err78 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.BatchExecute(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
