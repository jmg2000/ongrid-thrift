// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ongrid2

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

//You can define enums, which are just 32 bit integers. Values are optional
//and start at 1 if not supplied, C style again.
type FieldType int64
const (
  FieldType_INTEGER FieldType = 1
  FieldType_DOUBLE FieldType = 2
  FieldType_STRING FieldType = 3
  FieldType_DATETIME FieldType = 4
  FieldType_BLOB FieldType = 5
)

func (p FieldType) String() string {
  switch p {
  case FieldType_INTEGER: return "INTEGER"
  case FieldType_DOUBLE: return "DOUBLE"
  case FieldType_STRING: return "STRING"
  case FieldType_DATETIME: return "DATETIME"
  case FieldType_BLOB: return "BLOB"
  }
  return "<UNSET>"
}

func FieldTypeFromString(s string) (FieldType, error) {
  switch s {
  case "INTEGER": return FieldType_INTEGER, nil 
  case "DOUBLE": return FieldType_DOUBLE, nil 
  case "STRING": return FieldType_STRING, nil 
  case "DATETIME": return FieldType_DATETIME, nil 
  case "BLOB": return FieldType_BLOB, nil 
  }
  return FieldType(0), fmt.Errorf("not a valid FieldType string")
}


func FieldTypePtr(v FieldType) *FieldType { return &v }

func (p FieldType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FieldType) UnmarshalText(text []byte) error {
q, err := FieldTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FieldType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FieldType(v)
return nil
}

func (p * FieldType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ErrorCode int64
const (
  ErrorCode_UNKNOWN ErrorCode = 1
  ErrorCode_PERMISSION_DENIED ErrorCode = 2
  ErrorCode_INVALID_AUTH ErrorCode = 3
  ErrorCode_AUTH_EXPIRED ErrorCode = 4
  ErrorCode_DATA_INCORRECT ErrorCode = 5
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_UNKNOWN: return "UNKNOWN"
  case ErrorCode_PERMISSION_DENIED: return "PERMISSION_DENIED"
  case ErrorCode_INVALID_AUTH: return "INVALID_AUTH"
  case ErrorCode_AUTH_EXPIRED: return "AUTH_EXPIRED"
  case ErrorCode_DATA_INCORRECT: return "DATA_INCORRECT"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "UNKNOWN": return ErrorCode_UNKNOWN, nil 
  case "PERMISSION_DENIED": return ErrorCode_PERMISSION_DENIED, nil 
  case "INVALID_AUTH": return ErrorCode_INVALID_AUTH, nil 
  case "AUTH_EXPIRED": return ErrorCode_AUTH_EXPIRED, nil 
  case "DATA_INCORRECT": return ErrorCode_DATA_INCORRECT, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Name
//  - Type
//  - Length
//  - Precision
type ColumnMetadata struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type FieldType `thrift:"type,2" db:"type" json:"type"`
  Length int32 `thrift:"length,3" db:"length" json:"length"`
  Precision int32 `thrift:"precision,4" db:"precision" json:"precision"`
}

func NewColumnMetadata() *ColumnMetadata {
  return &ColumnMetadata{}
}


func (p *ColumnMetadata) GetName() string {
  return p.Name
}

func (p *ColumnMetadata) GetType() FieldType {
  return p.Type
}

func (p *ColumnMetadata) GetLength() int32 {
  return p.Length
}

func (p *ColumnMetadata) GetPrecision() int32 {
  return p.Precision
}
func (p *ColumnMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ColumnMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ColumnMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FieldType(v)
  p.Type = temp
}
  return nil
}

func (p *ColumnMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Length = v
}
  return nil
}

func (p *ColumnMetadata)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Precision = v
}
  return nil
}

func (p *ColumnMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ColumnMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ColumnMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ColumnMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("length", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:length: ", p), err) }
  if err := oprot.WriteI32(int32(p.Length)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.length (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:length: ", p), err) }
  return err
}

func (p *ColumnMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("precision", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:precision: ", p), err) }
  if err := oprot.WriteI32(int32(p.Precision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.precision (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:precision: ", p), err) }
  return err
}

func (p *ColumnMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnMetadata(%+v)", *p)
}

// Attributes:
//  - IntegerValue
//  - DoubleValue
//  - StringValue
//  - DatetimeValue
//  - BoolValue
//  - BlobValue
type DataField struct {
  IntegerValue *int64 `thrift:"integerValue,1" db:"integerValue" json:"integerValue,omitempty"`
  DoubleValue *float64 `thrift:"doubleValue,2" db:"doubleValue" json:"doubleValue,omitempty"`
  StringValue *string `thrift:"stringValue,3" db:"stringValue" json:"stringValue,omitempty"`
  DatetimeValue *int64 `thrift:"datetimeValue,4" db:"datetimeValue" json:"datetimeValue,omitempty"`
  BoolValue *bool `thrift:"boolValue,5" db:"boolValue" json:"boolValue,omitempty"`
  BlobValue []byte `thrift:"blobValue,6" db:"blobValue" json:"blobValue,omitempty"`
}

func NewDataField() *DataField {
  return &DataField{}
}

var DataField_IntegerValue_DEFAULT int64
func (p *DataField) GetIntegerValue() int64 {
  if !p.IsSetIntegerValue() {
    return DataField_IntegerValue_DEFAULT
  }
return *p.IntegerValue
}
var DataField_DoubleValue_DEFAULT float64
func (p *DataField) GetDoubleValue() float64 {
  if !p.IsSetDoubleValue() {
    return DataField_DoubleValue_DEFAULT
  }
return *p.DoubleValue
}
var DataField_StringValue_DEFAULT string
func (p *DataField) GetStringValue() string {
  if !p.IsSetStringValue() {
    return DataField_StringValue_DEFAULT
  }
return *p.StringValue
}
var DataField_DatetimeValue_DEFAULT int64
func (p *DataField) GetDatetimeValue() int64 {
  if !p.IsSetDatetimeValue() {
    return DataField_DatetimeValue_DEFAULT
  }
return *p.DatetimeValue
}
var DataField_BoolValue_DEFAULT bool
func (p *DataField) GetBoolValue() bool {
  if !p.IsSetBoolValue() {
    return DataField_BoolValue_DEFAULT
  }
return *p.BoolValue
}
var DataField_BlobValue_DEFAULT []byte

func (p *DataField) GetBlobValue() []byte {
  return p.BlobValue
}
func (p *DataField) IsSetIntegerValue() bool {
  return p.IntegerValue != nil
}

func (p *DataField) IsSetDoubleValue() bool {
  return p.DoubleValue != nil
}

func (p *DataField) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *DataField) IsSetDatetimeValue() bool {
  return p.DatetimeValue != nil
}

func (p *DataField) IsSetBoolValue() bool {
  return p.BoolValue != nil
}

func (p *DataField) IsSetBlobValue() bool {
  return p.BlobValue != nil
}

func (p *DataField) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataField)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntegerValue = &v
}
  return nil
}

func (p *DataField)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DoubleValue = &v
}
  return nil
}

func (p *DataField)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *DataField)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DatetimeValue = &v
}
  return nil
}

func (p *DataField)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BoolValue = &v
}
  return nil
}

func (p *DataField)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BlobValue = v
}
  return nil
}

func (p *DataField) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataField"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataField) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntegerValue() {
    if err := oprot.WriteFieldBegin("integerValue", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:integerValue: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IntegerValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.integerValue (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:integerValue: ", p), err) }
  }
  return err
}

func (p *DataField) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleValue() {
    if err := oprot.WriteFieldBegin("doubleValue", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:doubleValue: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doubleValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:doubleValue: ", p), err) }
  }
  return err
}

func (p *DataField) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringValue: ", p), err) }
    if err := oprot.WriteString(string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringValue: ", p), err) }
  }
  return err
}

func (p *DataField) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDatetimeValue() {
    if err := oprot.WriteFieldBegin("datetimeValue", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:datetimeValue: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DatetimeValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.datetimeValue (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:datetimeValue: ", p), err) }
  }
  return err
}

func (p *DataField) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetBoolValue() {
    if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:boolValue: ", p), err) }
    if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.boolValue (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:boolValue: ", p), err) }
  }
  return err
}

func (p *DataField) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetBlobValue() {
    if err := oprot.WriteFieldBegin("blobValue", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:blobValue: ", p), err) }
    if err := oprot.WriteBinary(p.BlobValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.blobValue (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:blobValue: ", p), err) }
  }
  return err
}

func (p *DataField) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataField(%+v)", *p)
}

// Attributes:
//  - Fields
type DataRow struct {
  Fields []*DataField `thrift:"fields,1" db:"fields" json:"fields"`
}

func NewDataRow() *DataRow {
  return &DataRow{}
}


func (p *DataRow) GetFields() []*DataField {
  return p.Fields
}
func (p *DataRow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataRow)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataField, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &DataField{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Fields = append(p.Fields, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataRow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataRow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataRow) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fields: ", p), err) }
  return err
}

func (p *DataRow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataRow(%+v)", *p)
}

// Attributes:
//  - Columns
//  - Rows
type DataRowSet struct {
  Columns []*ColumnMetadata `thrift:"columns,1" db:"columns" json:"columns"`
  Rows []*DataRow `thrift:"rows,2" db:"rows" json:"rows"`
}

func NewDataRowSet() *DataRowSet {
  return &DataRowSet{}
}


func (p *DataRowSet) GetColumns() []*ColumnMetadata {
  return p.Columns
}

func (p *DataRowSet) GetRows() []*DataRow {
  return p.Rows
}
func (p *DataRowSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataRowSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnMetadata, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &ColumnMetadata{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Columns = append(p.Columns, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataRowSet)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataRow, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &DataRow{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Rows = append(p.Rows, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataRowSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataRowSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataRowSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns: ", p), err) }
  return err
}

func (p *DataRowSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err) }
  return err
}

func (p *DataRowSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataRowSet(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - Length
//  - Precision
//  - IntegerValue
//  - DoubleValue
//  - StringValue
//  - DatetimeValue
//  - BoolValue
//  - BlobValue
type Parameter struct {
  Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
  Type FieldType `thrift:"type,2" db:"type" json:"type"`
  Length *int32 `thrift:"length,3" db:"length" json:"length,omitempty"`
  Precision *int32 `thrift:"precision,4" db:"precision" json:"precision,omitempty"`
  IntegerValue *int64 `thrift:"integerValue,5" db:"integerValue" json:"integerValue,omitempty"`
  DoubleValue *float64 `thrift:"doubleValue,6" db:"doubleValue" json:"doubleValue,omitempty"`
  StringValue *string `thrift:"stringValue,7" db:"stringValue" json:"stringValue,omitempty"`
  DatetimeValue *int64 `thrift:"datetimeValue,8" db:"datetimeValue" json:"datetimeValue,omitempty"`
  BoolValue *bool `thrift:"boolValue,9" db:"boolValue" json:"boolValue,omitempty"`
  BlobValue []byte `thrift:"blobValue,10" db:"blobValue" json:"blobValue,omitempty"`
}

func NewParameter() *Parameter {
  return &Parameter{}
}

var Parameter_Name_DEFAULT string
func (p *Parameter) GetName() string {
  if !p.IsSetName() {
    return Parameter_Name_DEFAULT
  }
return *p.Name
}

func (p *Parameter) GetType() FieldType {
  return p.Type
}
var Parameter_Length_DEFAULT int32
func (p *Parameter) GetLength() int32 {
  if !p.IsSetLength() {
    return Parameter_Length_DEFAULT
  }
return *p.Length
}
var Parameter_Precision_DEFAULT int32
func (p *Parameter) GetPrecision() int32 {
  if !p.IsSetPrecision() {
    return Parameter_Precision_DEFAULT
  }
return *p.Precision
}
var Parameter_IntegerValue_DEFAULT int64
func (p *Parameter) GetIntegerValue() int64 {
  if !p.IsSetIntegerValue() {
    return Parameter_IntegerValue_DEFAULT
  }
return *p.IntegerValue
}
var Parameter_DoubleValue_DEFAULT float64
func (p *Parameter) GetDoubleValue() float64 {
  if !p.IsSetDoubleValue() {
    return Parameter_DoubleValue_DEFAULT
  }
return *p.DoubleValue
}
var Parameter_StringValue_DEFAULT string
func (p *Parameter) GetStringValue() string {
  if !p.IsSetStringValue() {
    return Parameter_StringValue_DEFAULT
  }
return *p.StringValue
}
var Parameter_DatetimeValue_DEFAULT int64
func (p *Parameter) GetDatetimeValue() int64 {
  if !p.IsSetDatetimeValue() {
    return Parameter_DatetimeValue_DEFAULT
  }
return *p.DatetimeValue
}
var Parameter_BoolValue_DEFAULT bool
func (p *Parameter) GetBoolValue() bool {
  if !p.IsSetBoolValue() {
    return Parameter_BoolValue_DEFAULT
  }
return *p.BoolValue
}
var Parameter_BlobValue_DEFAULT []byte

func (p *Parameter) GetBlobValue() []byte {
  return p.BlobValue
}
func (p *Parameter) IsSetName() bool {
  return p.Name != nil
}

func (p *Parameter) IsSetLength() bool {
  return p.Length != nil
}

func (p *Parameter) IsSetPrecision() bool {
  return p.Precision != nil
}

func (p *Parameter) IsSetIntegerValue() bool {
  return p.IntegerValue != nil
}

func (p *Parameter) IsSetDoubleValue() bool {
  return p.DoubleValue != nil
}

func (p *Parameter) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *Parameter) IsSetDatetimeValue() bool {
  return p.DatetimeValue != nil
}

func (p *Parameter) IsSetBoolValue() bool {
  return p.BoolValue != nil
}

func (p *Parameter) IsSetBlobValue() bool {
  return p.BlobValue != nil
}

func (p *Parameter) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Parameter)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *Parameter)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FieldType(v)
  p.Type = temp
}
  return nil
}

func (p *Parameter)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Length = &v
}
  return nil
}

func (p *Parameter)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Precision = &v
}
  return nil
}

func (p *Parameter)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IntegerValue = &v
}
  return nil
}

func (p *Parameter)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DoubleValue = &v
}
  return nil
}

func (p *Parameter)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *Parameter)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.DatetimeValue = &v
}
  return nil
}

func (p *Parameter)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.BoolValue = &v
}
  return nil
}

func (p *Parameter)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.BlobValue = v
}
  return nil
}

func (p *Parameter) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Parameter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Parameter) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *Parameter) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLength() {
    if err := oprot.WriteFieldBegin("length", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:length: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Length)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.length (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:length: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrecision() {
    if err := oprot.WriteFieldBegin("precision", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:precision: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Precision)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.precision (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:precision: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntegerValue() {
    if err := oprot.WriteFieldBegin("integerValue", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:integerValue: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IntegerValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.integerValue (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:integerValue: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleValue() {
    if err := oprot.WriteFieldBegin("doubleValue", thrift.DOUBLE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:doubleValue: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doubleValue (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:doubleValue: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stringValue: ", p), err) }
    if err := oprot.WriteString(string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stringValue: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetDatetimeValue() {
    if err := oprot.WriteFieldBegin("datetimeValue", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:datetimeValue: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DatetimeValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.datetimeValue (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:datetimeValue: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetBoolValue() {
    if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:boolValue: ", p), err) }
    if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.boolValue (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:boolValue: ", p), err) }
  }
  return err
}

func (p *Parameter) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetBlobValue() {
    if err := oprot.WriteFieldBegin("blobValue", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:blobValue: ", p), err) }
    if err := oprot.WriteBinary(p.BlobValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.blobValue (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:blobValue: ", p), err) }
  }
  return err
}

func (p *Parameter) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Parameter(%+v)", *p)
}

// Attributes:
//  - Name
//  - Sql
//  - Parameters
type Query struct {
  Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
  Sql string `thrift:"sql,2" db:"sql" json:"sql"`
  Parameters []*Parameter `thrift:"parameters,3" db:"parameters" json:"parameters"`
}

func NewQuery() *Query {
  return &Query{}
}

var Query_Name_DEFAULT string
func (p *Query) GetName() string {
  if !p.IsSetName() {
    return Query_Name_DEFAULT
  }
return *p.Name
}

func (p *Query) GetSql() string {
  return p.Sql
}

func (p *Query) GetParameters() []*Parameter {
  return p.Parameters
}
func (p *Query) IsSetName() bool {
  return p.Name != nil
}

func (p *Query) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Query)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *Query)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sql = v
}
  return nil
}

func (p *Query)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Parameter, 0, size)
  p.Parameters =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Parameter{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Parameters = append(p.Parameters, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Query) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Query"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Query) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *Query) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sql", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sql: ", p), err) }
  if err := oprot.WriteString(string(p.Sql)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sql (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sql: ", p), err) }
  return err
}

func (p *Query) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameters", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameters: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Parameters)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parameters {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameters: ", p), err) }
  return err
}

func (p *Query) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Query(%+v)", *p)
}

// Structs can also be exceptions, if they are nasty.
// 
// Attributes:
//  - What
//  - Why
type InvalidOperation struct {
  What int32 `thrift:"what,1" db:"what" json:"what"`
  Why string `thrift:"why,2" db:"why" json:"why"`
}

func NewInvalidOperation() *InvalidOperation {
  return &InvalidOperation{}
}


func (p *InvalidOperation) GetWhat() int32 {
  return p.What
}

func (p *InvalidOperation) GetWhy() string {
  return p.Why
}
func (p *InvalidOperation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidOperation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.What = v
}
  return nil
}

func (p *InvalidOperation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Why = v
}
  return nil
}

func (p *InvalidOperation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidOperation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidOperation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("what", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:what: ", p), err) }
  if err := oprot.WriteI32(int32(p.What)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.what (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:what: ", p), err) }
  return err
}

func (p *InvalidOperation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:why: ", p), err) }
  if err := oprot.WriteString(string(p.Why)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.why (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:why: ", p), err) }
  return err
}

func (p *InvalidOperation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidOperation(%+v)", *p)
}

func (p *InvalidOperation) Error() string {
  return p.String()
}

// Attributes:
//  - Code
//  - Message
type UserException struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewUserException() *UserException {
  return &UserException{}
}


func (p *UserException) GetCode() ErrorCode {
  return p.Code
}

func (p *UserException) GetMessage() string {
  return p.Message
}
func (p *UserException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *UserException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UserException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *UserException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *UserException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserException(%+v)", *p)
}

func (p *UserException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type IntergridException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewIntergridException() *IntergridException {
  return &IntergridException{}
}


func (p *IntergridException) GetMessage() string {
  return p.Message
}
func (p *IntergridException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *IntergridException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IntergridException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *IntergridException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridException(%+v)", *p)
}

func (p *IntergridException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type NotFoundException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewNotFoundException() *NotFoundException {
  return &NotFoundException{}
}


func (p *NotFoundException) GetMessage() string {
  return p.Message
}
func (p *NotFoundException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NotFoundException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *NotFoundException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *NotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NotFoundException(%+v)", *p)
}

func (p *NotFoundException) Error() string {
  return p.String()
}

type Intergrid interface {  //Ahh, now onto the cool part, defining a service. Services just need a name
  //and can optionally inherit from another service using the extends keyword.

  // A method definition looks like C code. It has a return type, arguments,
  // and optionally a list of exceptions that it may throw. Note that argument
  // lists and exception lists are specified using the exact same syntax as
  // field lists in struct or exception definitions.
  // 
  // Parameters:
  //  - Login
  //  - Password
  Login(login string, password string) (r string, err error)
  // Parameters:
  //  - AuthToken
  Logout(authToken string) (err error)
  // Parameters:
  //  - AuthToken
  //  - Query
  ExecuteSelectQuery(authToken string, query *Query) (r *DataRowSet, err error)
  // Parameters:
  //  - AuthToken
  //  - Query
  ExecuteNonSelectQuery(authToken string, query *Query) (err error)
  // Parameters:
  //  - AuthToken
  StartBatchExecution(authToken string) (r string, err error)
  // Parameters:
  //  - AuthToken
  //  - BatchID
  //  - Query
  AddQuery(authToken string, batchID string, query *Query) (err error)
  // Parameters:
  //  - AuthToken
  //  - BatchID
  //  - Condition
  //  - OnSuccess
  FinishBatchExecution(authToken string, batchID string, condition *Query, onSuccess *Query) (r string, err error)
  // Parameters:
  //  - AuthToken
  //  - Queries
  //  - Condition
  //  - OnSuccess
  BatchExecute(authToken string, queries []*Query, condition *Query, onSuccess *Query) (r string, err error)
  Ping() (err error)
  // Parameters:
  //  - Num1
  //  - Num2
  Add(num1 int32, num2 int32) (r int32, err error)
  // This method has a oneway modifier. That means the client only makes
  // a request and does not listen for any response at all. Oneway methods
  // must be void.
  Zip() (err error)
}

//Ahh, now onto the cool part, defining a service. Services just need a name
//and can optionally inherit from another service using the extends keyword.
type IntergridClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewIntergridClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IntergridClient {
  return &IntergridClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewIntergridClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IntergridClient {
  return &IntergridClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// A method definition looks like C code. It has a return type, arguments,
// and optionally a list of exceptions that it may throw. Note that argument
// lists and exception lists are specified using the exact same syntax as
// field lists in struct or exception definitions.
// 
// Parameters:
//  - Login
//  - Password
func (p *IntergridClient) Login(login string, password string) (r string, err error) {
  if err = p.sendLogin(login, password); err != nil { return }
  return p.recvLogin()
}

func (p *IntergridClient) sendLogin(login string, password string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("login", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridLoginArgs{
  Login : login,
  Password : password,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvLogin() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "login" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "login failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "login failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "login failed: invalid message type")
    return
  }
  result := IntergridLoginResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.UserException != nil {
    err = result.UserException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthToken
func (p *IntergridClient) Logout(authToken string) (err error) {
  if err = p.sendLogout(authToken); err != nil { return }
  return p.recvLogout()
}

func (p *IntergridClient) sendLogout(authToken string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("logout", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridLogoutArgs{
  AuthToken : authToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvLogout() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "logout" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "logout failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "logout failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "logout failed: invalid message type")
    return
  }
  result := IntergridLogoutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - AuthToken
//  - Query
func (p *IntergridClient) ExecuteSelectQuery(authToken string, query *Query) (r *DataRowSet, err error) {
  if err = p.sendExecuteSelectQuery(authToken, query); err != nil { return }
  return p.recvExecuteSelectQuery()
}

func (p *IntergridClient) sendExecuteSelectQuery(authToken string, query *Query)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("executeSelectQuery", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridExecuteSelectQueryArgs{
  AuthToken : authToken,
  Query : query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvExecuteSelectQuery() (value *DataRowSet, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "executeSelectQuery" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "executeSelectQuery failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "executeSelectQuery failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "executeSelectQuery failed: invalid message type")
    return
  }
  result := IntergridExecuteSelectQueryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.IntergridException != nil {
    err = result.IntergridException
    return 
  } else   if result.UserException != nil {
    err = result.UserException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthToken
//  - Query
func (p *IntergridClient) ExecuteNonSelectQuery(authToken string, query *Query) (err error) {
  if err = p.sendExecuteNonSelectQuery(authToken, query); err != nil { return }
  return p.recvExecuteNonSelectQuery()
}

func (p *IntergridClient) sendExecuteNonSelectQuery(authToken string, query *Query)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("executeNonSelectQuery", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridExecuteNonSelectQueryArgs{
  AuthToken : authToken,
  Query : query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvExecuteNonSelectQuery() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "executeNonSelectQuery" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "executeNonSelectQuery failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "executeNonSelectQuery failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "executeNonSelectQuery failed: invalid message type")
    return
  }
  result := IntergridExecuteNonSelectQueryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.IntergridException != nil {
    err = result.IntergridException
    return 
  } else   if result.UserException != nil {
    err = result.UserException
    return 
  }
  return
}

// Parameters:
//  - AuthToken
func (p *IntergridClient) StartBatchExecution(authToken string) (r string, err error) {
  if err = p.sendStartBatchExecution(authToken); err != nil { return }
  return p.recvStartBatchExecution()
}

func (p *IntergridClient) sendStartBatchExecution(authToken string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("startBatchExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridStartBatchExecutionArgs{
  AuthToken : authToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvStartBatchExecution() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "startBatchExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "startBatchExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "startBatchExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "startBatchExecution failed: invalid message type")
    return
  }
  result := IntergridStartBatchExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.IntergridException != nil {
    err = result.IntergridException
    return 
  } else   if result.UserException != nil {
    err = result.UserException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthToken
//  - BatchID
//  - Query
func (p *IntergridClient) AddQuery(authToken string, batchID string, query *Query) (err error) {
  if err = p.sendAddQuery(authToken, batchID, query); err != nil { return }
  return p.recvAddQuery()
}

func (p *IntergridClient) sendAddQuery(authToken string, batchID string, query *Query)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addQuery", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridAddQueryArgs{
  AuthToken : authToken,
  BatchID : batchID,
  Query : query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvAddQuery() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addQuery" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addQuery failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addQuery failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addQuery failed: invalid message type")
    return
  }
  result := IntergridAddQueryResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.IntergridException != nil {
    err = result.IntergridException
    return 
  } else   if result.UserException != nil {
    err = result.UserException
    return 
  }
  return
}

// Parameters:
//  - AuthToken
//  - BatchID
//  - Condition
//  - OnSuccess
func (p *IntergridClient) FinishBatchExecution(authToken string, batchID string, condition *Query, onSuccess *Query) (r string, err error) {
  if err = p.sendFinishBatchExecution(authToken, batchID, condition, onSuccess); err != nil { return }
  return p.recvFinishBatchExecution()
}

func (p *IntergridClient) sendFinishBatchExecution(authToken string, batchID string, condition *Query, onSuccess *Query)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("finishBatchExecution", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridFinishBatchExecutionArgs{
  AuthToken : authToken,
  BatchID : batchID,
  Condition : condition,
  OnSuccess : onSuccess,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvFinishBatchExecution() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "finishBatchExecution" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "finishBatchExecution failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "finishBatchExecution failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "finishBatchExecution failed: invalid message type")
    return
  }
  result := IntergridFinishBatchExecutionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.IntergridException != nil {
    err = result.IntergridException
    return 
  } else   if result.UserException != nil {
    err = result.UserException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - AuthToken
//  - Queries
//  - Condition
//  - OnSuccess
func (p *IntergridClient) BatchExecute(authToken string, queries []*Query, condition *Query, onSuccess *Query) (r string, err error) {
  if err = p.sendBatchExecute(authToken, queries, condition, onSuccess); err != nil { return }
  return p.recvBatchExecute()
}

func (p *IntergridClient) sendBatchExecute(authToken string, queries []*Query, condition *Query, onSuccess *Query)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("batchExecute", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridBatchExecuteArgs{
  AuthToken : authToken,
  Queries : queries,
  Condition : condition,
  OnSuccess : onSuccess,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvBatchExecute() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "batchExecute" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "batchExecute failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "batchExecute failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "batchExecute failed: invalid message type")
    return
  }
  result := IntergridBatchExecuteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.IntergridException != nil {
    err = result.IntergridException
    return 
  } else   if result.UserException != nil {
    err = result.UserException
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *IntergridClient) Ping() (err error) {
  if err = p.sendPing(); err != nil { return }
  return p.recvPing()
}

func (p *IntergridClient) sendPing()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridPingArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvPing() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ping" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
    return
  }
  result := IntergridPingResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - Num1
//  - Num2
func (p *IntergridClient) Add(num1 int32, num2 int32) (r int32, err error) {
  if err = p.sendAdd(num1, num2); err != nil { return }
  return p.recvAdd()
}

func (p *IntergridClient) sendAdd(num1 int32, num2 int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("add", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := IntergridAddArgs{
  Num1 : num1,
  Num2 : num2,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *IntergridClient) recvAdd() (value int32, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "add" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add failed: invalid message type")
    return
  }
  result := IntergridAddResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// This method has a oneway modifier. That means the client only makes
// a request and does not listen for any response at all. Oneway methods
// must be void.
func (p *IntergridClient) Zip() (err error) {
  if err = p.sendZip(); err != nil { return }
  return
}

func (p *IntergridClient) sendZip()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("zip", thrift.ONEWAY, p.SeqId); err != nil {
      return
  }
  args := IntergridZipArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


type IntergridProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Intergrid
}

func (p *IntergridProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IntergridProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IntergridProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIntergridProcessor(handler Intergrid) *IntergridProcessor {

  self24 := &IntergridProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["login"] = &intergridProcessorLogin{handler:handler}
  self24.processorMap["logout"] = &intergridProcessorLogout{handler:handler}
  self24.processorMap["executeSelectQuery"] = &intergridProcessorExecuteSelectQuery{handler:handler}
  self24.processorMap["executeNonSelectQuery"] = &intergridProcessorExecuteNonSelectQuery{handler:handler}
  self24.processorMap["startBatchExecution"] = &intergridProcessorStartBatchExecution{handler:handler}
  self24.processorMap["addQuery"] = &intergridProcessorAddQuery{handler:handler}
  self24.processorMap["finishBatchExecution"] = &intergridProcessorFinishBatchExecution{handler:handler}
  self24.processorMap["batchExecute"] = &intergridProcessorBatchExecute{handler:handler}
  self24.processorMap["ping"] = &intergridProcessorPing{handler:handler}
  self24.processorMap["add"] = &intergridProcessorAdd{handler:handler}
  self24.processorMap["zip"] = &intergridProcessorZip{handler:handler}
return self24
}

func (p *IntergridProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x25

}

type intergridProcessorLogin struct {
  handler Intergrid
}

func (p *intergridProcessorLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridLoginResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Login(args.Login, args.Password); err2 != nil {
  switch v := err2.(type) {
    case *UserException:
  result.UserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: " + err2.Error())
    oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("login", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorLogout struct {
  handler Intergrid
}

func (p *intergridProcessorLogout) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridLogoutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridLogoutResult{}
  var err2 error
  if err2 = p.handler.Logout(args.AuthToken); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logout: " + err2.Error())
    oprot.WriteMessageBegin("logout", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("logout", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorExecuteSelectQuery struct {
  handler Intergrid
}

func (p *intergridProcessorExecuteSelectQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridExecuteSelectQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("executeSelectQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridExecuteSelectQueryResult{}
var retval *DataRowSet
  var err2 error
  if retval, err2 = p.handler.ExecuteSelectQuery(args.AuthToken, args.Query); err2 != nil {
  switch v := err2.(type) {
    case *IntergridException:
  result.IntergridException = v
    case *UserException:
  result.UserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeSelectQuery: " + err2.Error())
    oprot.WriteMessageBegin("executeSelectQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("executeSelectQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorExecuteNonSelectQuery struct {
  handler Intergrid
}

func (p *intergridProcessorExecuteNonSelectQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridExecuteNonSelectQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("executeNonSelectQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridExecuteNonSelectQueryResult{}
  var err2 error
  if err2 = p.handler.ExecuteNonSelectQuery(args.AuthToken, args.Query); err2 != nil {
  switch v := err2.(type) {
    case *IntergridException:
  result.IntergridException = v
    case *UserException:
  result.UserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeNonSelectQuery: " + err2.Error())
    oprot.WriteMessageBegin("executeNonSelectQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("executeNonSelectQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorStartBatchExecution struct {
  handler Intergrid
}

func (p *intergridProcessorStartBatchExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridStartBatchExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startBatchExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridStartBatchExecutionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.StartBatchExecution(args.AuthToken); err2 != nil {
  switch v := err2.(type) {
    case *IntergridException:
  result.IntergridException = v
    case *UserException:
  result.UserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startBatchExecution: " + err2.Error())
    oprot.WriteMessageBegin("startBatchExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("startBatchExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorAddQuery struct {
  handler Intergrid
}

func (p *intergridProcessorAddQuery) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridAddQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridAddQueryResult{}
  var err2 error
  if err2 = p.handler.AddQuery(args.AuthToken, args.BatchID, args.Query); err2 != nil {
  switch v := err2.(type) {
    case *IntergridException:
  result.IntergridException = v
    case *UserException:
  result.UserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addQuery: " + err2.Error())
    oprot.WriteMessageBegin("addQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("addQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorFinishBatchExecution struct {
  handler Intergrid
}

func (p *intergridProcessorFinishBatchExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridFinishBatchExecutionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("finishBatchExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridFinishBatchExecutionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.FinishBatchExecution(args.AuthToken, args.BatchID, args.Condition, args.OnSuccess); err2 != nil {
  switch v := err2.(type) {
    case *IntergridException:
  result.IntergridException = v
    case *UserException:
  result.UserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishBatchExecution: " + err2.Error())
    oprot.WriteMessageBegin("finishBatchExecution", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("finishBatchExecution", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorBatchExecute struct {
  handler Intergrid
}

func (p *intergridProcessorBatchExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridBatchExecuteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("batchExecute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridBatchExecuteResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.BatchExecute(args.AuthToken, args.Queries, args.Condition, args.OnSuccess); err2 != nil {
  switch v := err2.(type) {
    case *IntergridException:
  result.IntergridException = v
    case *UserException:
  result.UserException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batchExecute: " + err2.Error())
    oprot.WriteMessageBegin("batchExecute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("batchExecute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorPing struct {
  handler Intergrid
}

func (p *intergridProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridPingResult{}
  var err2 error
  if err2 = p.handler.Ping(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorAdd struct {
  handler Intergrid
}

func (p *intergridProcessorAdd) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridAddArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IntergridAddResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Add(args.Num1, args.Num2); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add: " + err2.Error())
    oprot.WriteMessageBegin("add", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type intergridProcessorZip struct {
  handler Intergrid
}

func (p *intergridProcessorZip) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IntergridZipArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.Zip(); err2 != nil {
    return true, err2
  }
  return true, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Login
//  - Password
type IntergridLoginArgs struct {
  Login string `thrift:"login,1" db:"login" json:"login"`
  Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewIntergridLoginArgs() *IntergridLoginArgs {
  return &IntergridLoginArgs{}
}


func (p *IntergridLoginArgs) GetLogin() string {
  return p.Login
}

func (p *IntergridLoginArgs) GetPassword() string {
  return p.Password
}
func (p *IntergridLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Login = v
}
  return nil
}

func (p *IntergridLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *IntergridLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err) }
  if err := oprot.WriteString(string(p.Login)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err) }
  return err
}

func (p *IntergridLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *IntergridLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
type IntergridLoginResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  UserException *UserException `thrift:"userException,1" db:"userException" json:"userException,omitempty"`
}

func NewIntergridLoginResult() *IntergridLoginResult {
  return &IntergridLoginResult{}
}

var IntergridLoginResult_Success_DEFAULT string
func (p *IntergridLoginResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return IntergridLoginResult_Success_DEFAULT
  }
return *p.Success
}
var IntergridLoginResult_UserException_DEFAULT *UserException
func (p *IntergridLoginResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IntergridLoginResult_UserException_DEFAULT
  }
return p.UserException
}
func (p *IntergridLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IntergridLoginResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IntergridLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IntergridLoginResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IntergridLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IntergridLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err) }
  }
  return err
}

func (p *IntergridLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridLoginResult(%+v)", *p)
}

// Attributes:
//  - AuthToken
type IntergridLogoutArgs struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
}

func NewIntergridLogoutArgs() *IntergridLogoutArgs {
  return &IntergridLogoutArgs{}
}


func (p *IntergridLogoutArgs) GetAuthToken() string {
  return p.AuthToken
}
func (p *IntergridLogoutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridLogoutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *IntergridLogoutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("logout_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridLogoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *IntergridLogoutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridLogoutArgs(%+v)", *p)
}

type IntergridLogoutResult struct {
}

func NewIntergridLogoutResult() *IntergridLogoutResult {
  return &IntergridLogoutResult{}
}

func (p *IntergridLogoutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridLogoutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("logout_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridLogoutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridLogoutResult(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - Query
type IntergridExecuteSelectQueryArgs struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  Query *Query `thrift:"query,2" db:"query" json:"query"`
}

func NewIntergridExecuteSelectQueryArgs() *IntergridExecuteSelectQueryArgs {
  return &IntergridExecuteSelectQueryArgs{}
}


func (p *IntergridExecuteSelectQueryArgs) GetAuthToken() string {
  return p.AuthToken
}
var IntergridExecuteSelectQueryArgs_Query_DEFAULT *Query
func (p *IntergridExecuteSelectQueryArgs) GetQuery() *Query {
  if !p.IsSetQuery() {
    return IntergridExecuteSelectQueryArgs_Query_DEFAULT
  }
return p.Query
}
func (p *IntergridExecuteSelectQueryArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *IntergridExecuteSelectQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridExecuteSelectQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *IntergridExecuteSelectQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Query = &Query{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *IntergridExecuteSelectQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("executeSelectQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridExecuteSelectQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *IntergridExecuteSelectQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *IntergridExecuteSelectQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridExecuteSelectQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IntergridException
//  - UserException
type IntergridExecuteSelectQueryResult struct {
  Success *DataRowSet `thrift:"success,0" db:"success" json:"success,omitempty"`
  IntergridException *IntergridException `thrift:"intergridException,1" db:"intergridException" json:"intergridException,omitempty"`
  UserException *UserException `thrift:"userException,2" db:"userException" json:"userException,omitempty"`
}

func NewIntergridExecuteSelectQueryResult() *IntergridExecuteSelectQueryResult {
  return &IntergridExecuteSelectQueryResult{}
}

var IntergridExecuteSelectQueryResult_Success_DEFAULT *DataRowSet
func (p *IntergridExecuteSelectQueryResult) GetSuccess() *DataRowSet {
  if !p.IsSetSuccess() {
    return IntergridExecuteSelectQueryResult_Success_DEFAULT
  }
return p.Success
}
var IntergridExecuteSelectQueryResult_IntergridException_DEFAULT *IntergridException
func (p *IntergridExecuteSelectQueryResult) GetIntergridException() *IntergridException {
  if !p.IsSetIntergridException() {
    return IntergridExecuteSelectQueryResult_IntergridException_DEFAULT
  }
return p.IntergridException
}
var IntergridExecuteSelectQueryResult_UserException_DEFAULT *UserException
func (p *IntergridExecuteSelectQueryResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IntergridExecuteSelectQueryResult_UserException_DEFAULT
  }
return p.UserException
}
func (p *IntergridExecuteSelectQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IntergridExecuteSelectQueryResult) IsSetIntergridException() bool {
  return p.IntergridException != nil
}

func (p *IntergridExecuteSelectQueryResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IntergridExecuteSelectQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridExecuteSelectQueryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DataRowSet{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IntergridExecuteSelectQueryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IntergridException = &IntergridException{}
  if err := p.IntergridException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntergridException), err)
  }
  return nil
}

func (p *IntergridExecuteSelectQueryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IntergridExecuteSelectQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("executeSelectQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridExecuteSelectQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IntergridExecuteSelectQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntergridException() {
    if err := oprot.WriteFieldBegin("intergridException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intergridException: ", p), err) }
    if err := p.IntergridException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntergridException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intergridException: ", p), err) }
  }
  return err
}

func (p *IntergridExecuteSelectQueryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userException: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userException: ", p), err) }
  }
  return err
}

func (p *IntergridExecuteSelectQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridExecuteSelectQueryResult(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - Query
type IntergridExecuteNonSelectQueryArgs struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  Query *Query `thrift:"query,2" db:"query" json:"query"`
}

func NewIntergridExecuteNonSelectQueryArgs() *IntergridExecuteNonSelectQueryArgs {
  return &IntergridExecuteNonSelectQueryArgs{}
}


func (p *IntergridExecuteNonSelectQueryArgs) GetAuthToken() string {
  return p.AuthToken
}
var IntergridExecuteNonSelectQueryArgs_Query_DEFAULT *Query
func (p *IntergridExecuteNonSelectQueryArgs) GetQuery() *Query {
  if !p.IsSetQuery() {
    return IntergridExecuteNonSelectQueryArgs_Query_DEFAULT
  }
return p.Query
}
func (p *IntergridExecuteNonSelectQueryArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *IntergridExecuteNonSelectQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridExecuteNonSelectQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *IntergridExecuteNonSelectQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Query = &Query{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *IntergridExecuteNonSelectQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("executeNonSelectQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridExecuteNonSelectQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *IntergridExecuteNonSelectQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err) }
  return err
}

func (p *IntergridExecuteNonSelectQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridExecuteNonSelectQueryArgs(%+v)", *p)
}

// Attributes:
//  - IntergridException
//  - UserException
type IntergridExecuteNonSelectQueryResult struct {
  IntergridException *IntergridException `thrift:"intergridException,1" db:"intergridException" json:"intergridException,omitempty"`
  UserException *UserException `thrift:"userException,2" db:"userException" json:"userException,omitempty"`
}

func NewIntergridExecuteNonSelectQueryResult() *IntergridExecuteNonSelectQueryResult {
  return &IntergridExecuteNonSelectQueryResult{}
}

var IntergridExecuteNonSelectQueryResult_IntergridException_DEFAULT *IntergridException
func (p *IntergridExecuteNonSelectQueryResult) GetIntergridException() *IntergridException {
  if !p.IsSetIntergridException() {
    return IntergridExecuteNonSelectQueryResult_IntergridException_DEFAULT
  }
return p.IntergridException
}
var IntergridExecuteNonSelectQueryResult_UserException_DEFAULT *UserException
func (p *IntergridExecuteNonSelectQueryResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IntergridExecuteNonSelectQueryResult_UserException_DEFAULT
  }
return p.UserException
}
func (p *IntergridExecuteNonSelectQueryResult) IsSetIntergridException() bool {
  return p.IntergridException != nil
}

func (p *IntergridExecuteNonSelectQueryResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IntergridExecuteNonSelectQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridExecuteNonSelectQueryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IntergridException = &IntergridException{}
  if err := p.IntergridException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntergridException), err)
  }
  return nil
}

func (p *IntergridExecuteNonSelectQueryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IntergridExecuteNonSelectQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("executeNonSelectQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridExecuteNonSelectQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntergridException() {
    if err := oprot.WriteFieldBegin("intergridException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intergridException: ", p), err) }
    if err := p.IntergridException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntergridException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intergridException: ", p), err) }
  }
  return err
}

func (p *IntergridExecuteNonSelectQueryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userException: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userException: ", p), err) }
  }
  return err
}

func (p *IntergridExecuteNonSelectQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridExecuteNonSelectQueryResult(%+v)", *p)
}

// Attributes:
//  - AuthToken
type IntergridStartBatchExecutionArgs struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
}

func NewIntergridStartBatchExecutionArgs() *IntergridStartBatchExecutionArgs {
  return &IntergridStartBatchExecutionArgs{}
}


func (p *IntergridStartBatchExecutionArgs) GetAuthToken() string {
  return p.AuthToken
}
func (p *IntergridStartBatchExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridStartBatchExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *IntergridStartBatchExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startBatchExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridStartBatchExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *IntergridStartBatchExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridStartBatchExecutionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IntergridException
//  - UserException
type IntergridStartBatchExecutionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  IntergridException *IntergridException `thrift:"intergridException,1" db:"intergridException" json:"intergridException,omitempty"`
  UserException *UserException `thrift:"userException,2" db:"userException" json:"userException,omitempty"`
}

func NewIntergridStartBatchExecutionResult() *IntergridStartBatchExecutionResult {
  return &IntergridStartBatchExecutionResult{}
}

var IntergridStartBatchExecutionResult_Success_DEFAULT string
func (p *IntergridStartBatchExecutionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return IntergridStartBatchExecutionResult_Success_DEFAULT
  }
return *p.Success
}
var IntergridStartBatchExecutionResult_IntergridException_DEFAULT *IntergridException
func (p *IntergridStartBatchExecutionResult) GetIntergridException() *IntergridException {
  if !p.IsSetIntergridException() {
    return IntergridStartBatchExecutionResult_IntergridException_DEFAULT
  }
return p.IntergridException
}
var IntergridStartBatchExecutionResult_UserException_DEFAULT *UserException
func (p *IntergridStartBatchExecutionResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IntergridStartBatchExecutionResult_UserException_DEFAULT
  }
return p.UserException
}
func (p *IntergridStartBatchExecutionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IntergridStartBatchExecutionResult) IsSetIntergridException() bool {
  return p.IntergridException != nil
}

func (p *IntergridStartBatchExecutionResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IntergridStartBatchExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridStartBatchExecutionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IntergridStartBatchExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IntergridException = &IntergridException{}
  if err := p.IntergridException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntergridException), err)
  }
  return nil
}

func (p *IntergridStartBatchExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IntergridStartBatchExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startBatchExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridStartBatchExecutionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IntergridStartBatchExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntergridException() {
    if err := oprot.WriteFieldBegin("intergridException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intergridException: ", p), err) }
    if err := p.IntergridException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntergridException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intergridException: ", p), err) }
  }
  return err
}

func (p *IntergridStartBatchExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userException: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userException: ", p), err) }
  }
  return err
}

func (p *IntergridStartBatchExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridStartBatchExecutionResult(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - BatchID
//  - Query
type IntergridAddQueryArgs struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  BatchID string `thrift:"batchID,2" db:"batchID" json:"batchID"`
  Query *Query `thrift:"query,3" db:"query" json:"query"`
}

func NewIntergridAddQueryArgs() *IntergridAddQueryArgs {
  return &IntergridAddQueryArgs{}
}


func (p *IntergridAddQueryArgs) GetAuthToken() string {
  return p.AuthToken
}

func (p *IntergridAddQueryArgs) GetBatchID() string {
  return p.BatchID
}
var IntergridAddQueryArgs_Query_DEFAULT *Query
func (p *IntergridAddQueryArgs) GetQuery() *Query {
  if !p.IsSetQuery() {
    return IntergridAddQueryArgs_Query_DEFAULT
  }
return p.Query
}
func (p *IntergridAddQueryArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *IntergridAddQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridAddQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *IntergridAddQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BatchID = v
}
  return nil
}

func (p *IntergridAddQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Query = &Query{}
  if err := p.Query.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *IntergridAddQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridAddQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *IntergridAddQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("batchID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:batchID: ", p), err) }
  if err := oprot.WriteString(string(p.BatchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.batchID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:batchID: ", p), err) }
  return err
}

func (p *IntergridAddQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query: ", p), err) }
  if err := p.Query.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query: ", p), err) }
  return err
}

func (p *IntergridAddQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridAddQueryArgs(%+v)", *p)
}

// Attributes:
//  - IntergridException
//  - UserException
type IntergridAddQueryResult struct {
  IntergridException *IntergridException `thrift:"intergridException,1" db:"intergridException" json:"intergridException,omitempty"`
  UserException *UserException `thrift:"userException,2" db:"userException" json:"userException,omitempty"`
}

func NewIntergridAddQueryResult() *IntergridAddQueryResult {
  return &IntergridAddQueryResult{}
}

var IntergridAddQueryResult_IntergridException_DEFAULT *IntergridException
func (p *IntergridAddQueryResult) GetIntergridException() *IntergridException {
  if !p.IsSetIntergridException() {
    return IntergridAddQueryResult_IntergridException_DEFAULT
  }
return p.IntergridException
}
var IntergridAddQueryResult_UserException_DEFAULT *UserException
func (p *IntergridAddQueryResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IntergridAddQueryResult_UserException_DEFAULT
  }
return p.UserException
}
func (p *IntergridAddQueryResult) IsSetIntergridException() bool {
  return p.IntergridException != nil
}

func (p *IntergridAddQueryResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IntergridAddQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridAddQueryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IntergridException = &IntergridException{}
  if err := p.IntergridException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntergridException), err)
  }
  return nil
}

func (p *IntergridAddQueryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IntergridAddQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridAddQueryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntergridException() {
    if err := oprot.WriteFieldBegin("intergridException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intergridException: ", p), err) }
    if err := p.IntergridException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntergridException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intergridException: ", p), err) }
  }
  return err
}

func (p *IntergridAddQueryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userException: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userException: ", p), err) }
  }
  return err
}

func (p *IntergridAddQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridAddQueryResult(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - BatchID
//  - Condition
//  - OnSuccess
type IntergridFinishBatchExecutionArgs struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  BatchID string `thrift:"batchID,2" db:"batchID" json:"batchID"`
  Condition *Query `thrift:"condition,3" db:"condition" json:"condition"`
  OnSuccess *Query `thrift:"onSuccess,4" db:"onSuccess" json:"onSuccess"`
}

func NewIntergridFinishBatchExecutionArgs() *IntergridFinishBatchExecutionArgs {
  return &IntergridFinishBatchExecutionArgs{}
}


func (p *IntergridFinishBatchExecutionArgs) GetAuthToken() string {
  return p.AuthToken
}

func (p *IntergridFinishBatchExecutionArgs) GetBatchID() string {
  return p.BatchID
}
var IntergridFinishBatchExecutionArgs_Condition_DEFAULT *Query
func (p *IntergridFinishBatchExecutionArgs) GetCondition() *Query {
  if !p.IsSetCondition() {
    return IntergridFinishBatchExecutionArgs_Condition_DEFAULT
  }
return p.Condition
}
var IntergridFinishBatchExecutionArgs_OnSuccess_DEFAULT *Query
func (p *IntergridFinishBatchExecutionArgs) GetOnSuccess() *Query {
  if !p.IsSetOnSuccess() {
    return IntergridFinishBatchExecutionArgs_OnSuccess_DEFAULT
  }
return p.OnSuccess
}
func (p *IntergridFinishBatchExecutionArgs) IsSetCondition() bool {
  return p.Condition != nil
}

func (p *IntergridFinishBatchExecutionArgs) IsSetOnSuccess() bool {
  return p.OnSuccess != nil
}

func (p *IntergridFinishBatchExecutionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridFinishBatchExecutionArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *IntergridFinishBatchExecutionArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BatchID = v
}
  return nil
}

func (p *IntergridFinishBatchExecutionArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Condition = &Query{}
  if err := p.Condition.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Condition), err)
  }
  return nil
}

func (p *IntergridFinishBatchExecutionArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.OnSuccess = &Query{}
  if err := p.OnSuccess.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OnSuccess), err)
  }
  return nil
}

func (p *IntergridFinishBatchExecutionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("finishBatchExecution_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridFinishBatchExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *IntergridFinishBatchExecutionArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("batchID", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:batchID: ", p), err) }
  if err := oprot.WriteString(string(p.BatchID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.batchID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:batchID: ", p), err) }
  return err
}

func (p *IntergridFinishBatchExecutionArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("condition", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:condition: ", p), err) }
  if err := p.Condition.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Condition), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:condition: ", p), err) }
  return err
}

func (p *IntergridFinishBatchExecutionArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("onSuccess", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:onSuccess: ", p), err) }
  if err := p.OnSuccess.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OnSuccess), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:onSuccess: ", p), err) }
  return err
}

func (p *IntergridFinishBatchExecutionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridFinishBatchExecutionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IntergridException
//  - UserException
type IntergridFinishBatchExecutionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  IntergridException *IntergridException `thrift:"intergridException,1" db:"intergridException" json:"intergridException,omitempty"`
  UserException *UserException `thrift:"userException,2" db:"userException" json:"userException,omitempty"`
}

func NewIntergridFinishBatchExecutionResult() *IntergridFinishBatchExecutionResult {
  return &IntergridFinishBatchExecutionResult{}
}

var IntergridFinishBatchExecutionResult_Success_DEFAULT string
func (p *IntergridFinishBatchExecutionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return IntergridFinishBatchExecutionResult_Success_DEFAULT
  }
return *p.Success
}
var IntergridFinishBatchExecutionResult_IntergridException_DEFAULT *IntergridException
func (p *IntergridFinishBatchExecutionResult) GetIntergridException() *IntergridException {
  if !p.IsSetIntergridException() {
    return IntergridFinishBatchExecutionResult_IntergridException_DEFAULT
  }
return p.IntergridException
}
var IntergridFinishBatchExecutionResult_UserException_DEFAULT *UserException
func (p *IntergridFinishBatchExecutionResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IntergridFinishBatchExecutionResult_UserException_DEFAULT
  }
return p.UserException
}
func (p *IntergridFinishBatchExecutionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IntergridFinishBatchExecutionResult) IsSetIntergridException() bool {
  return p.IntergridException != nil
}

func (p *IntergridFinishBatchExecutionResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IntergridFinishBatchExecutionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridFinishBatchExecutionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IntergridFinishBatchExecutionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IntergridException = &IntergridException{}
  if err := p.IntergridException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntergridException), err)
  }
  return nil
}

func (p *IntergridFinishBatchExecutionResult)  ReadField2(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IntergridFinishBatchExecutionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("finishBatchExecution_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridFinishBatchExecutionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IntergridFinishBatchExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntergridException() {
    if err := oprot.WriteFieldBegin("intergridException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intergridException: ", p), err) }
    if err := p.IntergridException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntergridException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intergridException: ", p), err) }
  }
  return err
}

func (p *IntergridFinishBatchExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userException: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userException: ", p), err) }
  }
  return err
}

func (p *IntergridFinishBatchExecutionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridFinishBatchExecutionResult(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - Queries
//  - Condition
//  - OnSuccess
type IntergridBatchExecuteArgs struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  Queries []*Query `thrift:"queries,2" db:"queries" json:"queries"`
  Condition *Query `thrift:"condition,3" db:"condition" json:"condition"`
  OnSuccess *Query `thrift:"onSuccess,4" db:"onSuccess" json:"onSuccess"`
}

func NewIntergridBatchExecuteArgs() *IntergridBatchExecuteArgs {
  return &IntergridBatchExecuteArgs{}
}


func (p *IntergridBatchExecuteArgs) GetAuthToken() string {
  return p.AuthToken
}

func (p *IntergridBatchExecuteArgs) GetQueries() []*Query {
  return p.Queries
}
var IntergridBatchExecuteArgs_Condition_DEFAULT *Query
func (p *IntergridBatchExecuteArgs) GetCondition() *Query {
  if !p.IsSetCondition() {
    return IntergridBatchExecuteArgs_Condition_DEFAULT
  }
return p.Condition
}
var IntergridBatchExecuteArgs_OnSuccess_DEFAULT *Query
func (p *IntergridBatchExecuteArgs) GetOnSuccess() *Query {
  if !p.IsSetOnSuccess() {
    return IntergridBatchExecuteArgs_OnSuccess_DEFAULT
  }
return p.OnSuccess
}
func (p *IntergridBatchExecuteArgs) IsSetCondition() bool {
  return p.Condition != nil
}

func (p *IntergridBatchExecuteArgs) IsSetOnSuccess() bool {
  return p.OnSuccess != nil
}

func (p *IntergridBatchExecuteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridBatchExecuteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *IntergridBatchExecuteArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Query, 0, size)
  p.Queries =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := &Query{}
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Queries = append(p.Queries, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IntergridBatchExecuteArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Condition = &Query{}
  if err := p.Condition.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Condition), err)
  }
  return nil
}

func (p *IntergridBatchExecuteArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.OnSuccess = &Query{}
  if err := p.OnSuccess.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OnSuccess), err)
  }
  return nil
}

func (p *IntergridBatchExecuteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batchExecute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridBatchExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *IntergridBatchExecuteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queries", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queries: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Queries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Queries {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queries: ", p), err) }
  return err
}

func (p *IntergridBatchExecuteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("condition", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:condition: ", p), err) }
  if err := p.Condition.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Condition), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:condition: ", p), err) }
  return err
}

func (p *IntergridBatchExecuteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("onSuccess", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:onSuccess: ", p), err) }
  if err := p.OnSuccess.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OnSuccess), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:onSuccess: ", p), err) }
  return err
}

func (p *IntergridBatchExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridBatchExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IntergridException
//  - UserException
type IntergridBatchExecuteResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  IntergridException *IntergridException `thrift:"intergridException,1" db:"intergridException" json:"intergridException,omitempty"`
  UserException *UserException `thrift:"userException,2" db:"userException" json:"userException,omitempty"`
}

func NewIntergridBatchExecuteResult() *IntergridBatchExecuteResult {
  return &IntergridBatchExecuteResult{}
}

var IntergridBatchExecuteResult_Success_DEFAULT string
func (p *IntergridBatchExecuteResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return IntergridBatchExecuteResult_Success_DEFAULT
  }
return *p.Success
}
var IntergridBatchExecuteResult_IntergridException_DEFAULT *IntergridException
func (p *IntergridBatchExecuteResult) GetIntergridException() *IntergridException {
  if !p.IsSetIntergridException() {
    return IntergridBatchExecuteResult_IntergridException_DEFAULT
  }
return p.IntergridException
}
var IntergridBatchExecuteResult_UserException_DEFAULT *UserException
func (p *IntergridBatchExecuteResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IntergridBatchExecuteResult_UserException_DEFAULT
  }
return p.UserException
}
func (p *IntergridBatchExecuteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IntergridBatchExecuteResult) IsSetIntergridException() bool {
  return p.IntergridException != nil
}

func (p *IntergridBatchExecuteResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IntergridBatchExecuteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridBatchExecuteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IntergridBatchExecuteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IntergridException = &IntergridException{}
  if err := p.IntergridException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntergridException), err)
  }
  return nil
}

func (p *IntergridBatchExecuteResult)  ReadField2(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IntergridBatchExecuteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batchExecute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridBatchExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IntergridBatchExecuteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntergridException() {
    if err := oprot.WriteFieldBegin("intergridException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intergridException: ", p), err) }
    if err := p.IntergridException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntergridException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intergridException: ", p), err) }
  }
  return err
}

func (p *IntergridBatchExecuteResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userException: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userException: ", p), err) }
  }
  return err
}

func (p *IntergridBatchExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridBatchExecuteResult(%+v)", *p)
}

type IntergridPingArgs struct {
}

func NewIntergridPingArgs() *IntergridPingArgs {
  return &IntergridPingArgs{}
}

func (p *IntergridPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridPingArgs(%+v)", *p)
}

type IntergridPingResult struct {
}

func NewIntergridPingResult() *IntergridPingResult {
  return &IntergridPingResult{}
}

func (p *IntergridPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridPingResult(%+v)", *p)
}

// Attributes:
//  - Num1
//  - Num2
type IntergridAddArgs struct {
  Num1 int32 `thrift:"num1,1" db:"num1" json:"num1"`
  Num2 int32 `thrift:"num2,2" db:"num2" json:"num2"`
}

func NewIntergridAddArgs() *IntergridAddArgs {
  return &IntergridAddArgs{}
}


func (p *IntergridAddArgs) GetNum1() int32 {
  return p.Num1
}

func (p *IntergridAddArgs) GetNum2() int32 {
  return p.Num2
}
func (p *IntergridAddArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridAddArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Num1 = v
}
  return nil
}

func (p *IntergridAddArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Num2 = v
}
  return nil
}

func (p *IntergridAddArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridAddArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num1: ", p), err) }
  if err := oprot.WriteI32(int32(p.Num1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num1: ", p), err) }
  return err
}

func (p *IntergridAddArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num2: ", p), err) }
  if err := oprot.WriteI32(int32(p.Num2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num2: ", p), err) }
  return err
}

func (p *IntergridAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IntergridAddResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIntergridAddResult() *IntergridAddResult {
  return &IntergridAddResult{}
}

var IntergridAddResult_Success_DEFAULT int32
func (p *IntergridAddResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return IntergridAddResult_Success_DEFAULT
  }
return *p.Success
}
func (p *IntergridAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IntergridAddResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridAddResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IntergridAddResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridAddResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IntergridAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridAddResult(%+v)", *p)
}

type IntergridZipArgs struct {
}

func NewIntergridZipArgs() *IntergridZipArgs {
  return &IntergridZipArgs{}
}

func (p *IntergridZipArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IntergridZipArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("zip_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IntergridZipArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IntergridZipArgs(%+v)", *p)
}


