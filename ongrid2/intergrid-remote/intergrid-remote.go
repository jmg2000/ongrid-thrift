// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "ongrid2"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string login(string login, string password)")
  fmt.Fprintln(os.Stderr, "  void logout(string authToken)")
  fmt.Fprintln(os.Stderr, "  DataRowSet executeSelectQuery(string authToken, Query query)")
  fmt.Fprintln(os.Stderr, "  void executeNonSelectQuery(string authToken, Query query)")
  fmt.Fprintln(os.Stderr, "  string startBatchExecution(string authToken)")
  fmt.Fprintln(os.Stderr, "  void addQuery(string authToken, string batchID, Query query)")
  fmt.Fprintln(os.Stderr, "  string finishBatchExecution(string authToken, string batchID, Query condition, Query onSuccess)")
  fmt.Fprintln(os.Stderr, "  string batchExecute(string authToken,  queries, Query condition, Query onSuccess)")
  fmt.Fprintln(os.Stderr, "  void ping()")
  fmt.Fprintln(os.Stderr, "  i32 add(i32 num1, i32 num2)")
  fmt.Fprintln(os.Stderr, "  void zip()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := ongrid2.NewIntergridClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "login":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Login requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.Login(value0, value1))
    fmt.Print("\n")
    break
  case "logout":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Logout requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Logout(value0))
    fmt.Print("\n")
    break
  case "executeSelectQuery":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteSelectQuery requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg31 := flag.Arg(2)
    mbTrans32 := thrift.NewTMemoryBufferLen(len(arg31))
    defer mbTrans32.Close()
    _, err33 := mbTrans32.WriteString(arg31)
    if err33 != nil {
      Usage()
      return
    }
    factory34 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt35 := factory34.GetProtocol(mbTrans32)
    argvalue1 := ongrid2.NewQuery()
    err36 := argvalue1.Read(jsProt35)
    if err36 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteSelectQuery(value0, value1))
    fmt.Print("\n")
    break
  case "executeNonSelectQuery":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteNonSelectQuery requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg38 := flag.Arg(2)
    mbTrans39 := thrift.NewTMemoryBufferLen(len(arg38))
    defer mbTrans39.Close()
    _, err40 := mbTrans39.WriteString(arg38)
    if err40 != nil {
      Usage()
      return
    }
    factory41 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt42 := factory41.GetProtocol(mbTrans39)
    argvalue1 := ongrid2.NewQuery()
    err43 := argvalue1.Read(jsProt42)
    if err43 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteNonSelectQuery(value0, value1))
    fmt.Print("\n")
    break
  case "startBatchExecution":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartBatchExecution requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.StartBatchExecution(value0))
    fmt.Print("\n")
    break
  case "addQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AddQuery requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg47 := flag.Arg(3)
    mbTrans48 := thrift.NewTMemoryBufferLen(len(arg47))
    defer mbTrans48.Close()
    _, err49 := mbTrans48.WriteString(arg47)
    if err49 != nil {
      Usage()
      return
    }
    factory50 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt51 := factory50.GetProtocol(mbTrans48)
    argvalue2 := ongrid2.NewQuery()
    err52 := argvalue2.Read(jsProt51)
    if err52 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddQuery(value0, value1, value2))
    fmt.Print("\n")
    break
  case "finishBatchExecution":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FinishBatchExecution requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg55 := flag.Arg(3)
    mbTrans56 := thrift.NewTMemoryBufferLen(len(arg55))
    defer mbTrans56.Close()
    _, err57 := mbTrans56.WriteString(arg55)
    if err57 != nil {
      Usage()
      return
    }
    factory58 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt59 := factory58.GetProtocol(mbTrans56)
    argvalue2 := ongrid2.NewQuery()
    err60 := argvalue2.Read(jsProt59)
    if err60 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg61 := flag.Arg(4)
    mbTrans62 := thrift.NewTMemoryBufferLen(len(arg61))
    defer mbTrans62.Close()
    _, err63 := mbTrans62.WriteString(arg61)
    if err63 != nil {
      Usage()
      return
    }
    factory64 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt65 := factory64.GetProtocol(mbTrans62)
    argvalue3 := ongrid2.NewQuery()
    err66 := argvalue3.Read(jsProt65)
    if err66 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FinishBatchExecution(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "batchExecute":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "BatchExecute requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg68 := flag.Arg(2)
    mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
    defer mbTrans69.Close()
    _, err70 := mbTrans69.WriteString(arg68)
    if err70 != nil { 
      Usage()
      return
    }
    factory71 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt72 := factory71.GetProtocol(mbTrans69)
    containerStruct1 := ongrid2.NewIntergridBatchExecuteArgs()
    err73 := containerStruct1.ReadField2(jsProt72)
    if err73 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Queries
    value1 := argvalue1
    arg74 := flag.Arg(3)
    mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
    defer mbTrans75.Close()
    _, err76 := mbTrans75.WriteString(arg74)
    if err76 != nil {
      Usage()
      return
    }
    factory77 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt78 := factory77.GetProtocol(mbTrans75)
    argvalue2 := ongrid2.NewQuery()
    err79 := argvalue2.Read(jsProt78)
    if err79 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg80 := flag.Arg(4)
    mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
    defer mbTrans81.Close()
    _, err82 := mbTrans81.WriteString(arg80)
    if err82 != nil {
      Usage()
      return
    }
    factory83 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt84 := factory83.GetProtocol(mbTrans81)
    argvalue3 := ongrid2.NewQuery()
    err85 := argvalue3.Read(jsProt84)
    if err85 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.BatchExecute(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Ping requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Ping())
    fmt.Print("\n")
    break
  case "add":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Add requires 2 args")
      flag.Usage()
    }
    tmp0, err86 := (strconv.Atoi(flag.Arg(1)))
    if err86 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err87 := (strconv.Atoi(flag.Arg(2)))
    if err87 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.Add(value0, value1))
    fmt.Print("\n")
    break
  case "zip":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Zip requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Zip())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
