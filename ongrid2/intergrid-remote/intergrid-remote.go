// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "ongrid2"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string login(string macaddr)")
  fmt.Fprintln(os.Stderr, "  void logout(string authToken)")
  fmt.Fprintln(os.Stderr, "  string addWorkPlace(string wpname, string macaddr, string login, string password)")
  fmt.Fprintln(os.Stderr, "  DataRowSet executeSelectQuery(string authToken, Query query)")
  fmt.Fprintln(os.Stderr, "  void executeNonSelectQuery(string authToken, Query query)")
  fmt.Fprintln(os.Stderr, "  string startBatchExecution(string authToken)")
  fmt.Fprintln(os.Stderr, "  void addQuery(string authToken, string batchID, Query query)")
  fmt.Fprintln(os.Stderr, "  string finishBatchExecution(string authToken, string batchID, Query condition, Query onSuccess)")
  fmt.Fprintln(os.Stderr, "  string batchExecute(string authToken,  queries, Query condition, Query onSuccess)")
  fmt.Fprintln(os.Stderr, "   getEvents(string authToken, string last)")
  fmt.Fprintln(os.Stderr, "  void postEvent(string authToken, Event event)")
  fmt.Fprintln(os.Stderr, "  void ping()")
  fmt.Fprintln(os.Stderr, "  void zip()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := ongrid2.NewIntergridClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "login":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Login requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Login(value0))
    fmt.Print("\n")
    break
  case "logout":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Logout requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Logout(value0))
    fmt.Print("\n")
    break
  case "addWorkPlace":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddWorkPlace requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.AddWorkPlace(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "executeSelectQuery":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteSelectQuery requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg39 := flag.Arg(2)
    mbTrans40 := thrift.NewTMemoryBufferLen(len(arg39))
    defer mbTrans40.Close()
    _, err41 := mbTrans40.WriteString(arg39)
    if err41 != nil {
      Usage()
      return
    }
    factory42 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt43 := factory42.GetProtocol(mbTrans40)
    argvalue1 := ongrid2.NewQuery()
    err44 := argvalue1.Read(jsProt43)
    if err44 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteSelectQuery(value0, value1))
    fmt.Print("\n")
    break
  case "executeNonSelectQuery":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExecuteNonSelectQuery requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg46 := flag.Arg(2)
    mbTrans47 := thrift.NewTMemoryBufferLen(len(arg46))
    defer mbTrans47.Close()
    _, err48 := mbTrans47.WriteString(arg46)
    if err48 != nil {
      Usage()
      return
    }
    factory49 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt50 := factory49.GetProtocol(mbTrans47)
    argvalue1 := ongrid2.NewQuery()
    err51 := argvalue1.Read(jsProt50)
    if err51 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExecuteNonSelectQuery(value0, value1))
    fmt.Print("\n")
    break
  case "startBatchExecution":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartBatchExecution requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.StartBatchExecution(value0))
    fmt.Print("\n")
    break
  case "addQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AddQuery requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg55 := flag.Arg(3)
    mbTrans56 := thrift.NewTMemoryBufferLen(len(arg55))
    defer mbTrans56.Close()
    _, err57 := mbTrans56.WriteString(arg55)
    if err57 != nil {
      Usage()
      return
    }
    factory58 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt59 := factory58.GetProtocol(mbTrans56)
    argvalue2 := ongrid2.NewQuery()
    err60 := argvalue2.Read(jsProt59)
    if err60 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AddQuery(value0, value1, value2))
    fmt.Print("\n")
    break
  case "finishBatchExecution":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FinishBatchExecution requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg63 := flag.Arg(3)
    mbTrans64 := thrift.NewTMemoryBufferLen(len(arg63))
    defer mbTrans64.Close()
    _, err65 := mbTrans64.WriteString(arg63)
    if err65 != nil {
      Usage()
      return
    }
    factory66 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt67 := factory66.GetProtocol(mbTrans64)
    argvalue2 := ongrid2.NewQuery()
    err68 := argvalue2.Read(jsProt67)
    if err68 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg69 := flag.Arg(4)
    mbTrans70 := thrift.NewTMemoryBufferLen(len(arg69))
    defer mbTrans70.Close()
    _, err71 := mbTrans70.WriteString(arg69)
    if err71 != nil {
      Usage()
      return
    }
    factory72 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt73 := factory72.GetProtocol(mbTrans70)
    argvalue3 := ongrid2.NewQuery()
    err74 := argvalue3.Read(jsProt73)
    if err74 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FinishBatchExecution(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "batchExecute":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "BatchExecute requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg76 := flag.Arg(2)
    mbTrans77 := thrift.NewTMemoryBufferLen(len(arg76))
    defer mbTrans77.Close()
    _, err78 := mbTrans77.WriteString(arg76)
    if err78 != nil { 
      Usage()
      return
    }
    factory79 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt80 := factory79.GetProtocol(mbTrans77)
    containerStruct1 := ongrid2.NewIntergridBatchExecuteArgs()
    err81 := containerStruct1.ReadField2(jsProt80)
    if err81 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Queries
    value1 := argvalue1
    arg82 := flag.Arg(3)
    mbTrans83 := thrift.NewTMemoryBufferLen(len(arg82))
    defer mbTrans83.Close()
    _, err84 := mbTrans83.WriteString(arg82)
    if err84 != nil {
      Usage()
      return
    }
    factory85 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt86 := factory85.GetProtocol(mbTrans83)
    argvalue2 := ongrid2.NewQuery()
    err87 := argvalue2.Read(jsProt86)
    if err87 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg88 := flag.Arg(4)
    mbTrans89 := thrift.NewTMemoryBufferLen(len(arg88))
    defer mbTrans89.Close()
    _, err90 := mbTrans89.WriteString(arg88)
    if err90 != nil {
      Usage()
      return
    }
    factory91 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt92 := factory91.GetProtocol(mbTrans89)
    argvalue3 := ongrid2.NewQuery()
    err93 := argvalue3.Read(jsProt92)
    if err93 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.BatchExecute(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getEvents":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetEvents requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetEvents(value0, value1))
    fmt.Print("\n")
    break
  case "postEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PostEvent requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg97 := flag.Arg(2)
    mbTrans98 := thrift.NewTMemoryBufferLen(len(arg97))
    defer mbTrans98.Close()
    _, err99 := mbTrans98.WriteString(arg97)
    if err99 != nil {
      Usage()
      return
    }
    factory100 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt101 := factory100.GetProtocol(mbTrans98)
    argvalue1 := ongrid2.NewEvent()
    err102 := argvalue1.Read(jsProt101)
    if err102 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PostEvent(value0, value1))
    fmt.Print("\n")
    break
  case "ping":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Ping requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Ping())
    fmt.Print("\n")
    break
  case "zip":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Zip requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Zip())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
